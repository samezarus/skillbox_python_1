from math import log, exp, ceil


print('Задача 2. Грубая математика')

# В одном аналитическом центре,
# где занимаются разного рода математическим анализом,
# работал практикант,
# который написал программу для расчёта некоторых функций.
# Правда, он в тот день очень устал
# и немного не так прочитал техническое задание
# и функции теперь рассчитываются довольно грубо.
#
# Вводится последовательность из N вещественных чисел.
# При этом положительные числа округляются вверх, отрицательные округляются вниз.
#
# Напишите программу,
# которая выводит натуральный логарифм от числа, если оно положительное,
# и экспоненту в степени числа, если оно отрицательное.
#
# Пример:
#
# Введите кол-во чисел: 3
# Введите число: 1.3
# x = 2   log(x) = 0.6931471805599453
#
# Введите число: -2.1
# x = -3   exp(x) = 0.049787068367863944
#
# Введите число: -5.9
# x = -6   exp(x) = 0.0024787521766663585


def custom_round(num_: float) -> int:
    """
    Кастомное округление дробного числа в зависимости от его ТТХ

    :param num_: дробное число для округления
    :return: результат округления
    """

    # положительные числа округляются вверх
    if num_ > 0:
        return ceil(num_)
    # отрицательные округляются вниз
    else:
        return (ceil(num_ * - 1)) * - 1


try:
    # Инициализируем
    # Количество итераций для ввода чисел
    nums= int(input("Введите кол-во чисел: "))

    for item in range(1, nums + 1):
        print()
        # Число от пользователя для последующей обработки
        num = float(input(f"Введите {item}-е число: "))

        # Число с нужным округлением
        new_num: int = custom_round(num)

        # Левая повторяющаяся часть строки верная для обоих исходов задачи
        res_str: str = f"x = {new_num}\t"

        if num > 0:
            print(res_str + f"log({new_num}) = {log(new_num)}")
        else:
            print(res_str + f"exp({new_num}) = {exp(new_num)}")

except Exception as e:
    print(f"Что-то пошло не по плану: {e}")